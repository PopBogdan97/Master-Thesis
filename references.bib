
@book{szefer_principles_2019,
	title = {Principles of secure processor architecture design},
	isbn = {978-1-68173-001-1 978-1-68173-002-8 978-1-68173-404-0 1-68173-001-4},
	series = {Synthesis lectures on computer architecture 45},
	publisher = {Morgan and Claypool},
	author = {Szefer, Jakub},
	date = {2019},
}

@article{demigha_hardware-based_2021,
	title = {Hardware-based solutions for trusted cloud computing},
	volume = {103},
	issn = {0167-4048},
	url = {https://www.sciencedirect.com/science/article/pii/S0167404820303904},
	doi = {10.1016/j.cose.2020.102117},
	abstract = {The increasing number of threats targeting cloud computing and the exploitation of specifically privileged software vulnerabilities have pushed the security managers of cloud service providers to deploy hardware-based solutions. These solutions can offer better hardware-assisted security features for a broad range of computing platforms including both {CISC} and {RISC} architecture families in datacenters. Their goal is to reduce the attack surface by rooting the trust into the hardware instead of some high-privileged pieces of system software such as the operating system or the hypervisor which have been demonstrated that they include severe security vulnerabilities, thus limiting the adoption of the cloud computing model for some security-skeptical users. In this paper, we give cloud users and customers, application developers and security managers a comprehensive overview of four major industrial-scale commercial hardware-based solutions brought by major vendors in the cloud market. We present, analyze and compare Intel {TXT}, {ARM} {TrustZone}, {AMD} {SEV}, and Intel {SGX} technologies with respect to more than twenty criteria fitting within three categories: security, functional and deployment. We discuss each of these technologies and show the cases where they particularly excel. Our comparison can help {IT} managers to take the right decision about which better industrial technology to adopt for their particular security requirements and future cloud migrations.},
	pages = {102117},
	journaltitle = {Computers \& Security},
	shortjournal = {Computers \& Security},
	author = {Demigha, Oualid and Larguet, Ramzi},
	urldate = {2021-03-31},
	date = {2021-04-01},
	langid = {english},
	keywords = {{AMD} {SEV}, {ARM} {TrustZone}, Hardware-assisted security, Intel {SGX}, Intel {TXT}, Trusted cloud computing, Trusted execution environment},
	file = {ScienceDirect Full Text PDF:/home/bogdan/Zotero/storage/TF6WUZ9G/Demigha and Larguet - 2021 - Hardware-based solutions for trusted cloud computi.pdf:application/pdf;ScienceDirect Snapshot:/home/bogdan/Zotero/storage/ZQ452RUW/S0167404820303904.html:text/html},
}

@article{guerreiro_teender_2020,
	title = {{TEEnder}: {SGX} enclave migration using {HSMs}},
	volume = {96},
	issn = {0167-4048},
	url = {https://www.sciencedirect.com/science/article/pii/S0167404820301474},
	doi = {10.1016/j.cose.2020.101874},
	shorttitle = {{TEEnder}},
	abstract = {Intel Software Guard Extensions ({SGX}) is a new method of enhancing application security by creating safe areas of memory (enclaves) where data and code are protected from inspection and tampering. This technology is being applied to cloud computing as well, however, software deployed with {SGX} enclaves is complex to migrate between machines using traditional methods as {SGX} uses unique hardware keys for data sealing. This paper proposes a novel method of migrating {SGX} enclaves between different machines using Hardware Security Modules ({HSMs}) to encrypt and decrypt data using {HSM} generated keys. The use of {HSMs} achieves faster migration for large enclaves or during multiple concurrent migrations. Since the this solution does not depend on the security of remote attestation, and uses the keys stored in the {HSM} it provides a higher degree of security than current enclave migration solutions.},
	pages = {101874},
	journaltitle = {Computers \& Security},
	shortjournal = {Computers \& Security},
	author = {Guerreiro, João and Moura, Rui and Silva, João Nuno},
	urldate = {2021-03-31},
	date = {2020-09-01},
	langid = {english},
	keywords = {Intel {SGX}, Trusted execution environment, Cloud computing, Enclave migration, Hardware security module},
	file = {ScienceDirect Full Text PDF:/home/bogdan/Zotero/storage/VQ5ESVJ2/Guerreiro et al. - 2020 - TEEnder SGX enclave migration using HSMs.pdf:application/pdf},
}

@inproceedings{alder_migrating_2018,
	title = {Migrating {SGX} Enclaves with Persistent State},
	doi = {10.1109/DSN.2018.00031},
	abstract = {Hardware-supported security mechanisms like Intel Software Guard Extensions ({SGX}) provide strong security guarantees, which are particularly relevant in cloud settings. However, their reliance on physical hardware conflicts with cloud practices, like migration of {VMs} between physical platforms. For instance, the {SGX} trusted execution environment (enclave) is bound to a single physical {CPU}. Although prior work has proposed an effective mechanism to migrate an enclave's data memory, it overlooks the migration of persistent state, including sealed data and monotonic counters; the former risks data loss whilst the latter undermines the {SGX} security guarantees. We show how this can be exploited to mount attacks, and then propose an improved enclave migration approach guaranteeing the consistency of persistent state. Our software-only approach enables migratable sealed data and monotonic counters, maintains all {SGX} security guarantees, minimizes developer effort, and incurs negligible performance overhead.},
	eventtitle = {2018 48th Annual {IEEE}/{IFIP} International Conference on Dependable Systems and Networks ({DSN})},
	pages = {195--206},
	booktitle = {2018 48th Annual {IEEE}/{IFIP} International Conference on Dependable Systems and Networks ({DSN})},
	author = {Alder, F. and Kurnikov, A. and Paverd, A. and Asokan, N.},
	date = {2018-06},
	note = {{ISSN}: 2158-3927},
	keywords = {Intel {SGX}, Computational modeling, Counters, Cryptography, Hardware, Sealing, Software, Virtual machine monitors, Virtual machining, {VM} Migration},
	file = {IEEE Xplore Full Text PDF:/home/bogdan/Zotero/storage/WCMYUZTZ/Alder et al. - 2018 - Migrating SGX Enclaves with Persistent State.pdf:application/pdf;IEEE Xplore Abstract Record:/home/bogdan/Zotero/storage/QFEXDWRQ/8416483.html:text/html},
}

@inproceedings{gu_secure_2017,
	title = {Secure Live Migration of {SGX} Enclaves on Untrusted Cloud},
	doi = {10.1109/DSN.2017.37},
	abstract = {The recent commercial availability of Intel {SGX} (Software Guard {eXtensions}) provides a hardware-enabled building block for secure execution of software modules in an untrusted cloud. As an untrusted hypervisor/{OS} has no access to an enclave's running states, a {VM} (virtual machine) with enclaves running inside loses the capability of live migration, a key feature of {VMs} in the cloud. This paper presents the first study on the support for live migration of {SGX}-capable {VMs}. We identify the security properties that a secure enclave migration process should meet and propose a software-based solution. We leverage several techniques such as two-phase checkpointing and self-destroy to implement our design on a real {SGX} machine. Security analysis confirms the security of our proposed design and performance evaluation shows that it incurs negligible performance overhead. Besides, we give suggestions on the future hardware design for supporting transparent enclave migration.},
	eventtitle = {2017 47th Annual {IEEE}/{IFIP} International Conference on Dependable Systems and Networks ({DSN})},
	pages = {225--236},
	booktitle = {2017 47th Annual {IEEE}/{IFIP} International Conference on Dependable Systems and Networks ({DSN})},
	author = {Gu, J. and Hua, Z. and Xia, Y. and Chen, H. and Zang, B. and Guan, H. and Li, J.},
	date = {2017-06},
	note = {{ISSN}: 2158-3927},
	keywords = {Cloud computing, Hardware, Virtual machine monitors, Context, Program processors, Security},
	file = {IEEE Xplore Full Text PDF:/home/bogdan/Zotero/storage/6TRE3QW4/Gu et al. - 2017 - Secure Live Migration of SGX Enclaves on Untrusted.pdf:application/pdf;IEEE Xplore Abstract Record:/home/bogdan/Zotero/storage/CYWL5MP5/8023125.html:text/html},
}

@article{norton_trusted_2016,
	title = {Trusted Execution Development: Designing a Secure, High-Performance Remote Attestation Protocol},
	author = {Norton, Seth Daniel and Titus, Alexander David},
	date = {2016},
}

@inproceedings{gasmi_beyond_2007,
	location = {New York, {NY}, {USA}},
	title = {Beyond secure channels},
	isbn = {978-1-59593-888-6},
	url = {https://doi.org/10.1145/1314354.1314363},
	doi = {10.1145/1314354.1314363},
	series = {{STC} '07},
	abstract = {A Trusted Channel is a secure communication channel which is cryptographically bound to the state of the hardware and software configurations of the endpoints. In this paper, we describe secure and flexible mechanisms to establish and maintain Trusted Channels which do not have the deficiencies of previous proposals. We also present a concrete implementation proposal based on Transport Layer Security ({TLS}) protocol, and Trusted Computing technology. We use Subject Key Attestation Evidence extensions to X.509v3 certificates to convey configuration information during key agreement ({TLS} handshake). The resulting session key is kept within the Trusted Computing Base, and is updated in a predetermined manner to reflect any detected change in the local configuration. This allows an endpoint to detect changes in the configuration of the peer endpoint while the Trusted Channel is in place, and to decide according to a local policy whether to maintain or tear down the Trusted Channel},
	pages = {30--40},
	booktitle = {Proceedings of the 2007 {ACM} workshop on Scalable trusted computing},
	publisher = {Association for Computing Machinery},
	author = {Gasmi, Yacine and Sadeghi, Ahmad-Reza and Stewin, Patrick and Unger, Martin and Asokan, N.},
	urldate = {2021-03-31},
	date = {2007-11-02},
	keywords = {hypervisor, microkernel, relay attack, remote attestation, state changes, {TLS}, trusted channel, trusted computing, virtualization},
}

@article{knauth_integrating_2019,
	title = {Integrating Remote Attestation with Transport Layer Security},
	url = {http://arxiv.org/abs/1801.05863},
	abstract = {Intel(R) Software Guard Extensions (Intel(R) {SGX}) is a promising technology to securely process information in otherwise untrusted environments. An important aspect of Intel {SGX} is the ability to perform remote attestation to assess the endpoint's trustworthiness. Ultimately, remote attestation will result in an attested secure channel to provision secrets to the enclave. We seamlessly combine Intel {SGX} remote attestation with the establishment of a standard Transport Layer Security ({TLS}) connection. Remote attestation is performed during the connection setup. To achieve this, we neither change the {TLS} protocol, nor do we modify existing protocol implementations. We have prototype implementations for three widely used open-source {TLS} libraries: {OpenSSL}, {wolfSSL} and {mbedTLS}. We describe the requirements, design and implementation details to seamlessly bind attested {TLS} endpoints to Intel {SGX} enclaves.},
	journaltitle = {{arXiv}:1801.05863 [cs]},
	author = {Knauth, Thomas and Steiner, Michael and Chakrabarti, Somnath and Lei, Li and Xing, Cedric and Vij, Mona},
	urldate = {2021-03-31},
	date = {2019-07-26},
	eprinttype = {arxiv},
	eprint = {1801.05863},
	keywords = {Computer Science - Cryptography and Security},
	file = {arXiv Fulltext PDF:/home/bogdan/Zotero/storage/UD5J6KLG/Knauth et al. - 2019 - Integrating Remote Attestation with Transport Laye.pdf:application/pdf;arXiv.org Snapshot:/home/bogdan/Zotero/storage/X7ZC7B4K/1801.html:text/html},
}

@book{kevin_hoffman_programming_2019,
	title = {Programming {WebAssembly} with Rust},
	isbn = {978-1-68050-636-5},
	url = {https://pragprog.com/titles/khrust/programming-webassembly-with-rust/},
	pagetotal = {238},
	publisher = {The Pragmatic Programmers},
	author = {Kevin Hoffman},
	date = {2019-03},
}

@inproceedings{lee_keystone_2020,
	location = {New York, {NY}, {USA}},
	title = {Keystone: an open framework for architecting trusted execution environments},
	isbn = {978-1-4503-6882-7},
	url = {https://doi.org/10.1145/3342195.3387532},
	doi = {10.1145/3342195.3387532},
	series = {{EuroSys} '20},
	shorttitle = {Keystone},
	abstract = {Trusted execution environments ({TEEs}) see rising use in devices from embedded sensors to cloud servers and encompass a range of cost, power constraints, and security threat model choices. On the other hand, each of the current vendor-specific {TEEs} makes a fixed set of trade-offs with little room for customization. We present Keystone---the first open-source framework for building customized {TEEs}. Keystone uses simple abstractions provided by the hardware such as memory isolation and a programmable layer underneath untrusted components (e.g., {OS}). We build reusable {TEE} core primitives from these abstractions while allowing platform-specific modifications and flexible feature choices. We showcase how Keystone-based {TEEs} run on unmodified {RISC}-V hardware and demonstrate the strengths of our design in terms of security, {TCB} size, execution of a range of benchmarks, applications, kernels, and deployment models.},
	pages = {1--16},
	booktitle = {Proceedings of the Fifteenth European Conference on Computer Systems},
	publisher = {Association for Computing Machinery},
	author = {Lee, Dayeol and Kohlbrenner, David and Shinde, Shweta and Asanović, Krste and Song, Dawn},
	urldate = {2021-03-31},
	date = {2020-04-15},
	keywords = {hardware enclave, hardware root of trust, memory isolation, open source, {RISC}-V, secure enclave, side-channel attack, trusted execution environment},
	file = {Full Text PDF:/home/bogdan/Zotero/storage/V256XAMW/Lee et al. - 2020 - Keystone an open framework for architecting trust.pdf:application/pdf},
}

@inproceedings{anati_innovative_2013,
	title = {Innovative technology for {CPU} based attestation and sealing},
	volume = {13},
	pages = {7},
	booktitle = {Proceedings of the 2nd international workshop on hardware and architectural support for security and privacy},
	publisher = {{ACM} New York, {NY}, {USA}},
	author = {Anati, Ittai and Gueron, Shay and Johnson, Simon and Scarlata, Vincent},
	date = {2013},
}

@online{noauthor_security_nodate,
	title = {Security - {WebAssembly}},
	url = {https://webassembly.org/docs/security/},
	urldate = {2021-03-31},
	file = {Security - WebAssembly:/home/bogdan/Zotero/storage/2CNWKFL8/security.html:text/html},
}

@inproceedings{lehmann_everything_2020,
	title = {Everything Old is New Again: Binary Security of {WebAssembly}},
	isbn = {978-1-939133-17-5},
	url = {https://www.usenix.org/conference/usenixsecurity20/presentation/lehmann},
	shorttitle = {Everything Old is New Again},
	eventtitle = {29th \{{USENIX}\} Security Symposium (\{{USENIX}\} Security 20)},
	pages = {217--234},
	author = {Lehmann, Daniel and Kinder, Johannes and Pradel, Michael},
	urldate = {2021-03-31},
	date = {2020},
	langid = {english},
	file = {Full Text PDF:/home/bogdan/Zotero/storage/T99CCXDJ/Lehmann et al. - 2020 - Everything Old is New Again Binary Security of We.pdf:application/pdf;Snapshot:/home/bogdan/Zotero/storage/I5JEL25W/lehmann.html:text/html},
}

@software{martin_kanakawac_2021,
	title = {kanaka/wac},
	rights = {View license         ,                 View license},
	url = {https://github.com/kanaka/wac},
	abstract = {{WebAssembly} interpreter in C. Contribute to kanaka/wac development by creating an account on {GitHub}.},
	author = {Martin, Joel},
	urldate = {2021-03-31},
	date = {2021-03-22},
	note = {original-date: 2017-04-13T17:11:59Z},
	keywords = {binaryen, c, docker-image, emscripten, gcc, javascript, mvp, native, repl, wasm, wasm-modules, webassembly},
}